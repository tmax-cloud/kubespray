apiVersion: v1
kind: Namespace
metadata:
  name: {{ NAME_SPACE }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ APP_NAME }}-account
  namespace: {{ NAME_SPACE }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ APP_NAME }}-role
  namespace: {{ NAME_SPACE }}
rules:
- apiGroups: [""]
  resources: ["services"]
  resourceNames: ["{{ APP_NAME }}-service"]
  verbs: ["get", "list", "create", "patch", "update"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments"]
  resourceNames: ["{{ APP_NAME }}"]
  verbs: ["get", "list", "create", "patch", "update", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "patch", "update", "delete"]
- apiGroups: ["networkings", "extensions"]
  resources: ["ingresses"]
  resourceNames: ["{{ APP_NAME }}-ingress"]
  verbs: ["get", "list", "create", "patch", "update", "delete"]
- apiGroups: ["cert-manager.io"]
  resources: ["issuers"]
  verbs: ["get", "list", "create", "patch", "update", "delete"]
- apiGroups: ["cert-manager.io"]
  resources: ["Certificate","certificates"]
  verbs: ["get", "list", "create", "patch", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ APP_NAME }}-binding
  namespace: {{ NAME_SPACE }}
subjects:
- kind: ServiceAccount
  name: {{ APP_NAME }}-account
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ APP_NAME }}-role
---
apiVersion: v1
kind: Service
metadata:
  name: {{ APP_NAME }}-service
  namespace: {{ NAME_SPACE }}
  labels:
    app: {{ APP_NAME }}
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
  - name: https
    port: 443
  - name: ssh
    port: {{ SSH_PORT }}
    targetPort: 22
  selector:
    app: {{ APP_NAME }}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ APP_NAME }}-ingress
  namespace: {{ NAME_SPACE }}
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "1024m"
    kubernetes.io/ingress.class: {{ INGRESS_CLASS }} #nginx #nginx-shd
spec:
  tls:
    - hosts:
      - waiting.ip
      secretName: {{ APP_NAME }}-tls
  rules:
  - host: waiting.ip
    http:
      paths:
      - backend:
          serviceName: {{ APP_NAME }}-service
          servicePort: {{ WEB_NODE_PORT }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ APP_NAME }}-pvc
  namespace: {{ NAME_SPACE }}
  labels:
    app: {{ APP_NAME }}
spec:
  storageClassName: {{ STORAGE_CLASS }}
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: {{ STORAGE }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ APP_NAME }}
  namespace: {{ NAME_SPACE }}
  labels:
    app: {{ APP_NAME }}
spec:
  selector:
    matchLabels:
      app: {{ APP_NAME }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ APP_NAME }}
    spec:
      serviceAccountName: {{ APP_NAME }}-account
      initContainers:
      - name: parse-svc
        image: docker.io/bitnami/kubectl:1.20.10
        env:
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: shared
          mountPath: /tmp/shared
        resources:
          limits:
            cpu: {{ RESOURCE_CPU }}
            memory: {{ RESOURCE_MEM }}
          requests:
            cpu: {{ RESOURCE_CPU }}
            memory: {{ RESOURCE_MEM }}
        command:
        - /bin/bash
        - -c
        - -x
        - |
          SVC_TYPE={{ SERVICE_TYPE }}
          PORT={{ WEB_NODE_PORT }}
          PORT_SSH={{ SSH_PORT }}
          # Remove fractions
          PORT="${PORT/\.[0-9]*/}"
          PORT_SSH="${PORT_SSH/\.[0-9]*/}"
          # Configure Service
          if [[ "$SVC_TYPE" == "NodePort" ]]; then
              if [[ "$PORT" == "80" ]]; then
                kubectl -n {{ NAME_SPACE }} patch service {{ APP_NAME }}-service --type=json -p '[{"op": "replace", "path": "/spec/type", "value": "NodePort"}]'
                PORT=$(kubectl get -n {{ NAME_SPACE }} service {{ APP_NAME }}-service -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
              fi
              kubectl -n {{ NAME_SPACE }} patch service {{ APP_NAME }}-service --type=json -p '[{"op": "replace", "path": "/spec/type", "value": "NodePort"}, {"op": "replace", "path": "/spec/ports/0/nodePort", "value": '$PORT'}, {"op": "replace", "path": "/spec/ports/0/port", "value": '$PORT'}, {"op": "replace", "path": "/spec/ports/0/targetPort", "value": '$PORT'}]'
          elif [[ "$SVC_TYPE" == "LoadBalancer" ]]; then
              kubectl -n {{ NAME_SPACE }} patch service {{ APP_NAME }}-service --type=json -p '[{"op": "replace", "path": "/spec/type", "value": "LoadBalancer"}]'
          fi
          # Delete Ingress if SVC_TYPE is not Ingress
          if [[ "$SVC_TYPE" != "Ingress" ]]; then
              kubectl -n {{ NAME_SPACE }} delete ingress {{ APP_NAME }}-ingress
          fi
          # Get external ip and port
          if [[ "$SVC_TYPE" == "ClusterIP" ]]; then
              EXTERNAL_IP="http://$(kubectl get -n {{ NAME_SPACE }} service {{ APP_NAME }}-service -o jsonpath='{.spec.clusterIP}')/"
          elif  [[ "$SVC_TYPE" == "NodePort" ]]; then
              if [[ {{ WEB_NODE_IP }} != "" ]]; then
                  NODE_IP={{ WEB_NODE_IP }}
              fi
              PORT=$(kubectl -n {{ NAME_SPACE }} get service {{ APP_NAME }}-service -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
              EXTERNAL_IP="http://$NODE_IP:$PORT/"
          elif  [[ "$SVC_TYPE" == "LoadBalancer" ]]; then
              IP=""
              while [ "$IP" == "" ]; do
                IP=$(kubectl -n {{ NAME_SPACE }} get service {{ APP_NAME }}-service -o jsonpath='{.status.loadBalancer.ingress[].ip}')
                sleep 1
              done
              EXTERNAL_IP="http://$IP/"
          elif  [[ "$SVC_TYPE" == "Ingress" ]]; then
              if [[ {{ INGRESS_HOST }} == "" ]]; then
                  NOW_IP=""
                  while [ "$NOW_IP" == "" ]; do
                      NOW_IP=$(kubectl -n {{ NAME_SPACE }} get ingress {{ APP_NAME }}-ingress -o jsonpath='{.status.loadBalancer.ingress[].ip}')
                  done
                  ING_HOST="{{ APP_NAME }}.$NAMESPACE.${NOW_IP}.nip.io"
                  EXTERNAL_IP="http://$ING_HOST/"
              else
                  ING_HOST={{ INGRESS_HOST }}
                  EXTERNAL_IP="http://${INGRESS_HOST}/"
              fi
              NOW_IP=$(kubectl -n {{ NAME_SPACE }} get ingress {{ APP_NAME }}-ingress -o jsonpath='{.status.loadBalancer.ingress[].ip}')
              kubectl -n {{ NAME_SPACE }} patch ingress {{ APP_NAME }}-ingress --type=json -p '[{"op": "replace", "path": "/spec/rules/0/host", "value": "'$ING_HOST'"}]'
          else
              echo "Something's wrong"
          fi
          # Override external url
          if [[ "${EXTERNAL_URL}" != "" ]]; then
              EXTERNAL_IP="${EXTERNAL_URL}"
          fi
          cat <<EOT >> /tmp/shared/omnibus.env
          external_url '$EXTERNAL_IP'
          gitlab_rails['gitlab_shell_ssh_port'] = $PORT_SSH
          prometheus['enable'] = false
          prometheus['monitor_kubernetes'] = false
          unicorn['worker_processes'] = 4
          grafana['enable'] = false
          nginx['client_max_body_size'] = '2500m'
          gitlab_rails['initial_root_password'] = "password"


          EOT
          # Add keycloak
          if [[ {{ KEYCLOAK_URL }} != "" ]]; then
            if [[ {{ KEYCLOAK_TLS_SECRET_NAME }} != "" ]]; then
              kubectl -n {{ NAME_SPACE }} get secret {{ KEYCLOAK_TLS_SECRET_NAME }} -o jsonpath='{.data.tls\.crt}' | base64 -d > /tmp/shared/keycloak.pem
            fi
            cat <<EOY >> /tmp/shared/omnibus.env
          gitlab_rails['omniauth_enabled'] = true
          gitlab_rails['omniauth_allow_single_sign_on'] = ['oauth2_generic']
          gitlab_rails['omniauth_block_auto_created_users'] = false
          gitlab_rails['omniauth_providers'] = [
          {
                  'name' => 'oauth2_generic',
                  'issuer' => '{{ KEYCLOAK_URL }}',
                  'app_id' => '{{ KEYCLOAK_CLIENT }}',
                  'app_secret' => '{{ KEYCLOAK_SECRET }}',
                  'discovery' => true,
                  'args' => {
                  client_options: {
                          'site' => '{{ KEYCLOAK_URL }}',
                          'user_info_url' => '/auth/realms/tmax/protocol/openid-connect/userinfo',
                          'authorize_url' => '/auth/realms/tmax/protocol/openid-connect/auth',
                          'token_url' => '/auth/realms/tmax/protocol/openid-connect/token',
                          'redirect_uri' => '$EXTERNAL_IP/users/auth/oauth2_generic/callback',
                  },
                  user_response_structure: {
                  attributes: { email:'email', first_name:'given_name', last_name:'family_name', name:'name', nickname:'preferred_username' },
                  id_path: 'preferred_username'
                  },
                  }
          }
          ]
          EOY
          fi
      - name: init-cert
        image: docker.io/bitnami/kubectl:1.20.10
        env:
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: shared
          mountPath: /tmp/shared
        resources:
          limits:
            cpu: {{ RESOURCE_CPU }}
            memory: {{ RESOURCE_MEM }}
          requests:
            cpu: {{ RESOURCE_CPU }}
            memory: {{ RESOURCE_MEM }}
        command:
        - /bin/bash
        - -c
        - -x
        - |
          SVC_TYPE={{ SERVICE_TYPE }}
          ING_HOST=$(kubectl get -n {{ NAME_SPACE }} ingress {{ APP_NAME }}-ingress -o jsonpath='{.spec.rules[0].host}')
          if [[ "$SVC_TYPE" == "Ingress" ]]; then
            # if no secret provided, use self-signed certificate
            if [[ {{ KEYCLOAK_TLS_SECRET_NAME }} == "" ]]; then
              NOW_IP=$(kubectl get -n {{ NAME_SPACE }} ingress {{ APP_NAME }}-ingress -o jsonpath='{.status.loadBalancer.ingress[].ip}')

              # create self-sgined issuer
              kubectl apply -n {{ NAME_SPACE }} -f <(echo "
              apiVersion: cert-manager.io/v1
              kind: Issuer
              metadata:
                name: {{ APP_NAME }}-issuer
                namespace: {{ NAME_SPACE }}
              spec:
                selfSigned: {}
              ")
              # create self-signed certficiate
              kubectl apply -n {{ NAME_SPACE }} -f <(echo "
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: {{ APP_NAME }}
                namespace: {{ NAME_SPACE }}
              spec:
                isCA: true
                dnsNames:
                  - ${ING_HOST}
                secretName: {{ APP_NAME }}-tls
                issuerRef:
                  name: {{ APP_NAME }}-issuer
              ")
              kubectl patch -n {{ NAME_SPACE }} ingress {{ APP_NAME }}-ingress --type=json -p '[{"op": "replace", "path": "/spec/tls/0/hosts/0", "value": "'$ING_HOST'"}]'
            else
              kubectl patch -n {{ NAME_SPACE }} ingress {{ APP_NAME }}-ingress --type=json -p '[{"op": "replace", "path": "/spec/tls/0/secretName", "value": "'$TLS_SECRET_NAME'"}]'
            fi
          fi
      containers:
      - name: {{ APP_NAME }}
        image: docker.io/gitlab/gitlab-ce:13.6.4-ce.0
        command:
        - /bin/sh
        - -c
        - -x
        - |
          export GITLAB_OMNIBUS_CONFIG="$(cat /tmp/shared/omnibus.env)"
          echo 'export GITLAB_OMNIBUS_CONFIG="$(cat /tmp/shared/omnibus.env)"' >> /root/.bashrc
          mkdir -p /etc/gitlab/trusted-certs
          cp /tmp/shared/keycloak.pem /etc/gitlab/trusted-certs/keycloak.pem
          /assets/wrapper
        ports:
        - name: http
          containerPort: {{ WEB_NODE_PORT }}
        - name: https
          containerPort: 443
        - name: ssh
          containerPort: 22
        volumeMounts:
        - name: {{ APP_NAME }}-pv
          mountPath: /etc/gitlab
          subPath: config
        - name: {{ APP_NAME }}-pv
          mountPath: /var/opt/gitlab
          subPath: data
        - name: shared
          mountPath: /tmp/shared
        resources:
          limits:
            cpu: {{ RESOURCE_CPU }}
            memory: {{ RESOURCE_MEM }}
          requests:
            cpu: {{ RESOURCE_CPU }}
            memory: {{ RESOURCE_MEM }}
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              /opt/gitlab/bin/gitlab-healthcheck --fail --max-time 10
          periodSeconds: 150
      volumes:
      - name: {{ APP_NAME }}-pv
        persistentVolumeClaim:
          claimName: {{ APP_NAME }}-pvc
      - name: shared
        emptyDir: {}
