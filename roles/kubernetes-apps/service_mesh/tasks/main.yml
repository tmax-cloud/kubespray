- name: Service Mesh | Create addon dir
  file:
    path: "{{ kube_config_dir }}/addons/service_mesh"
    state: directory
    owner: root
    group: root
    mode: 0755
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Service Mesh | Copy Manifests
  copy:
    src: "{{ item }}"
    dest: "{{ kube_config_dir }}/addons/service_mesh/{{ item }}"
  with_items:
    - crd.yml
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Service Mesh | Template Manifests
  template:
    src: "{{ item }}.j2"
    dest: "{{ kube_config_dir }}/addons/service_mesh/{{ item }}"
  with_items:
    - base.yml
    - tracing.yml
    - core.yml
    - ingress-gateway.yml
    - metric.yml
    - kiali.yml
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Service Mesh | create CRD
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/service_mesh/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - crd.yml
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Service Mesh | wait CRD
  shell: "while [ \"$({{ bin_dir }}/kubectl get crd | grep networking.istio.io | wc -l)\" == \"0\" ]; do echo 'CRD is not registered yet'; sleep 2; done; echo 'CRD is registered'; sleep 5"
  when: inventory_hostname == groups['kube_control_plane'][0]
  register: service_mesh_crd_wait
- debug:
    msg: "{{ service_mesh_crd_wait.stdout_lines }}"

- name: Service Mesh | Apply manifests
  kube:
    kubectl: "{{ bin_dir }}/kubectl"
    filename: "{{ kube_config_dir }}/addons/service_mesh/{{ item }}"
    state: "latest"
    wait: true
  with_items:
    - crd.yml
    - base.yml
    - tracing.yml
    - core.yml
    - ingress-gateway.yml
    - metric.yml
    - kiali.yml
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
